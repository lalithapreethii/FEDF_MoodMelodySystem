{"ast":null,"code":"import axios from 'axios';\n\n// Fetch user history by ID (quiz results, recommended playlists, etc.)\nexport const getHistory = async userId => {\n  try {\n    const res = await axios.get(`/api/history/${userId}`);\n    return res.data;\n  } catch (err) {\n    console.error('Failed to fetch history:', err);\n    return [];\n  }\n};\n\n// Save new journal entry\nexport const saveJournal = async entry => {\n  try {\n    await axios.post('/api/journal', entry);\n    return true;\n  } catch (err) {\n    console.error('Failed to save journal entry:', err);\n    return false;\n  }\n};\n\n// Get recommended song/playlist based on mood quiz answers.\nexport const getRecommendedSong = async answers => {\n  // Example: these answers are posted, API returns a song/playlist string.\n  try {\n    const res = await axios.post('/api/recommend', {\n      answers\n    });\n    return res.data.song || \"No Recommendation\";\n  } catch (err) {\n    console.error('Failed to get recommended song:', err);\n    return \"Error – Try Again\";\n  }\n};\n\n// Example: fetch user's journal entries\nexport const getJournalEntries = async userId => {\n  try {\n    const res = await axios.get(`/api/journal/${userId}`);\n    return res.data.entries || [];\n  } catch (err) {\n    console.error('Failed to fetch journal entries:', err);\n    return [];\n  }\n};\n\n// Example: user profile fetch\nexport const getProfile = async userId => {\n  try {\n    const res = await axios.get(`/api/profile/${userId}`);\n    return res.data;\n  } catch (err) {\n    console.error('Failed to fetch profile:', err);\n    return null;\n  }\n};","map":{"version":3,"names":["axios","getHistory","userId","res","get","data","err","console","error","saveJournal","entry","post","getRecommendedSong","answers","song","getJournalEntries","entries","getProfile"],"sources":["C:/2nd year/mood-song-app/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Fetch user history by ID (quiz results, recommended playlists, etc.)\r\nexport const getHistory = async (userId) => {\r\n  try {\r\n    const res = await axios.get(`/api/history/${userId}`);\r\n    return res.data;\r\n  } catch (err) {\r\n    console.error('Failed to fetch history:', err);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Save new journal entry\r\nexport const saveJournal = async (entry) => {\r\n  try {\r\n    await axios.post('/api/journal', entry);\r\n    return true;\r\n  } catch (err) {\r\n    console.error('Failed to save journal entry:', err);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Get recommended song/playlist based on mood quiz answers.\r\nexport const getRecommendedSong = async (answers) => {\r\n  // Example: these answers are posted, API returns a song/playlist string.\r\n  try {\r\n    const res = await axios.post('/api/recommend', { answers });\r\n    return res.data.song || \"No Recommendation\";\r\n  } catch (err) {\r\n    console.error('Failed to get recommended song:', err);\r\n    return \"Error – Try Again\";\r\n  }\r\n};\r\n\r\n// Example: fetch user's journal entries\r\nexport const getJournalEntries = async (userId) => {\r\n  try {\r\n    const res = await axios.get(`/api/journal/${userId}`);\r\n    return res.data.entries || [];\r\n  } catch (err) {\r\n    console.error('Failed to fetch journal entries:', err);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Example: user profile fetch\r\nexport const getProfile = async (userId) => {\r\n  try {\r\n    const res = await axios.get(`/api/profile/${userId}`);\r\n    return res.data;\r\n  } catch (err) {\r\n    console.error('Failed to fetch profile:', err);\r\n    return null;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,UAAU,GAAG,MAAOC,MAAM,IAAK;EAC1C,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,gBAAgBF,MAAM,EAAE,CAAC;IACrD,OAAOC,GAAG,CAACE,IAAI;EACjB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,GAAG,CAAC;IAC9C,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,WAAW,GAAG,MAAOC,KAAK,IAAK;EAC1C,IAAI;IACF,MAAMV,KAAK,CAACW,IAAI,CAAC,cAAc,EAAED,KAAK,CAAC;IACvC,OAAO,IAAI;EACb,CAAC,CAAC,OAAOJ,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEF,GAAG,CAAC;IACnD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,kBAAkB,GAAG,MAAOC,OAAO,IAAK;EACnD;EACA,IAAI;IACF,MAAMV,GAAG,GAAG,MAAMH,KAAK,CAACW,IAAI,CAAC,gBAAgB,EAAE;MAAEE;IAAQ,CAAC,CAAC;IAC3D,OAAOV,GAAG,CAACE,IAAI,CAACS,IAAI,IAAI,mBAAmB;EAC7C,CAAC,CAAC,OAAOR,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEF,GAAG,CAAC;IACrD,OAAO,mBAAmB;EAC5B;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,iBAAiB,GAAG,MAAOb,MAAM,IAAK;EACjD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,gBAAgBF,MAAM,EAAE,CAAC;IACrD,OAAOC,GAAG,CAACE,IAAI,CAACW,OAAO,IAAI,EAAE;EAC/B,CAAC,CAAC,OAAOV,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEF,GAAG,CAAC;IACtD,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAMW,UAAU,GAAG,MAAOf,MAAM,IAAK;EAC1C,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,gBAAgBF,MAAM,EAAE,CAAC;IACrD,OAAOC,GAAG,CAACE,IAAI;EACjB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,GAAG,CAAC;IAC9C,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}